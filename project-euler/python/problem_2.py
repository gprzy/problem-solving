# 2. Even Fibonacci numbers
# Each new term in the Fibonacci sequence is generated by adding 
# the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose 
# values do not exceed four million, find the sum of the even-valued terms.

from typing import Tuple, List

def fibonacci(n: int) -> List[int]:
    raiz5 = 5**(1/2)
    return int((1/raiz5)*(pow((1+raiz5)/2,n)-pow((1-raiz5)/2,n)))

def sum_even(seq: List[int]) -> int:
    sum_value = 0
    for i in seq:
        if i%2 == 0:
            sum_value += i
    return sum_value

def get_n_even_fibonacci_terms_sum(n: int, return_seq=False) -> Tuple[List[int], int]:
    seq = []
    i = 1
    while fibonacci(i) < n+1:
        seq.append(fibonacci(i))
        i += 1
    if return_seq:
        return seq, sum_even(seq)
    else:
        return sum_even(seq)

if __name__ == '__main__':
    print('Fibonacci from 1 to n and the even values sum')
    seq, sum_evens = get_n_even_fibonacci_terms_sum(int(4e6), return_seq=True)
    print(seq)
    print(sum_evens)